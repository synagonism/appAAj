package pk_Util;

/**
 * @modified 2003.11.19
 * @since
 * @author HoKoNoUmo
 */

import java.util.*;

/**
 * A class for generating labels to use as DEFINING-LABELS of nodes.
 *
 * By default, this factory initially generates single-letter labels starting with
 * a lower case "a".
 * When it runs out of single letter labels, it starts on double letter labels,
 * beginning with "aa", "ab", etc.  It will increment the letters from right to left
 * in the labels as it progresses.
 * Factories can also be specified to start with a particular string as a label.
 * Note that upper case letters are not used as the labels are intended to be used
 * case-insensitively.
 * <p>Thus the factory will generate:<br/>
 * "a"-"z", "aa"-"az", "ba"-bz", ... , "zz", "aaa"-"zzz", etc.
 *
 */
public class LabelFactory
{
	/** The next available label. **/
	private String nextLabel = "a";

	/** The label produced. **/
	private String lastLabel = null;

	/**
	 * Constructs a new label factory.
	 */
	public LabelFactory()
	{
	}

	/**
	 * Constructs a new label factory using the specified label as the next available
	 * label.
	 *
	 * @param newFirstLabel  the first label that should be generated by this
	 * factory.
	 */
	public LabelFactory(String newFirstLabel)
	{
		nextLabel = newFirstLabel;
	}


	/**
	 * @return a new label.
	 */
	public String getNextLabel()
	{
		int labelLength, currPos;
		String newLabel, currentLabel;

		currentLabel = nextLabel;

		labelLength = nextLabel.length();
		currPos = labelLength - 1;
		while ((currPos >= 0) && (nextLabel.charAt(currPos) == 'z'))
			currPos--;

		if (currPos < 0)
		{
			// The string is all z's so we must increase the length by one and fill it with a's.
			nextLabel = "";
			for (int count = 0; count < labelLength + 1; count++)
				nextLabel += "a";
		}
		else {
			// Increment the character at the current position
			char x[] = new char[1];

			if (currPos > 0)
				newLabel = nextLabel.substring(0, currPos);
			else
				newLabel = "";

			x[0] = (char)(nextLabel.charAt(currPos) + 1);
			newLabel += new String(x);

			if (currPos < labelLength - 1)
				newLabel += nextLabel.substring(currPos + 1, labelLength);

			nextLabel = newLabel;
		}

		lastLabel = currentLabel;
		return currentLabel;
	}


	/**
	 * @return the last label produced by this factory.
	 */
	public String getLastLabel()
	{
		return lastLabel;
	}


	/**
	 * Resets this factory to use the specified label as the next available label.
	 *
	 * @param newFirstLabel  the first label that should be generated by this
	 * factory.
	 */
	public void resetFactory(String newFirstLabel)
	{
		nextLabel = newFirstLabel;
		lastLabel = null;
	}
}
